// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	user "zero-shop/user/api/internal/handler/user"
	userAddress "zero-shop/user/api/internal/handler/userAddress"
	userInfo "zero-shop/user/api/internal/handler/userInfo"
	"zero-shop/user/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: user.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/user/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUserState},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: user.LogoutHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sendcode",
					Handler: user.SendCodeHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/user/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUserState},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/userinfo/bindemail",
					Handler: userInfo.BindEmailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/userinfo",
					Handler: userInfo.UserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/userinfo/email",
					Handler: userInfo.UpdateEmailHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/userinfo",
					Handler: userInfo.UpdateUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/userinfo/password",
					Handler: userInfo.UpdatePasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/userinfo/uploaduserimg",
					Handler: userInfo.UploadUserImgHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/userinfo/usermoney",
					Handler: userInfo.GetUserMoneyHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/user/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUserState},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/address",
					Handler: userAddress.CreateUserAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/address",
					Handler: userAddress.UserAddressListHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/address",
					Handler: userAddress.UpdateUserAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/address",
					Handler: userAddress.DeleteUserAddressHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/user/v1"),
	)
}
