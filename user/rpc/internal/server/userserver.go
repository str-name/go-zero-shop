// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"zero-shop/user/rpc/internal/logic"
	"zero-shop/user/rpc/internal/svc"
	"zero-shop/user/rpc/pb"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// user
func (s *UserServer) Register(ctx context.Context, in *pb.RegisterReq) (*pb.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UserServer) Login(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServer) GenerateToken(ctx context.Context, in *pb.GenerateTokenReq) (*pb.GenerateTokenResp, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}

func (s *UserServer) Logout(ctx context.Context, in *pb.LogoutReq) (*pb.LogoutResp, error) {
	l := logic.NewLogoutLogic(ctx, s.svcCtx)
	return l.Logout(in)
}

func (s *UserServer) GetUserInfo(ctx context.Context, in *pb.GetUserInfoReq) (*pb.GetUserInfoResp, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UserServer) UpdateEmail(ctx context.Context, in *pb.UpdateEmailReq) (*pb.UpdateEmailResp, error) {
	l := logic.NewUpdateEmailLogic(ctx, s.svcCtx)
	return l.UpdateEmail(in)
}

func (s *UserServer) UpdatePassword(ctx context.Context, in *pb.UpdatePasswordReq) (*pb.UpdatePasswordResp, error) {
	l := logic.NewUpdatePasswordLogic(ctx, s.svcCtx)
	return l.UpdatePassword(in)
}

func (s *UserServer) UpdateUserInfo(ctx context.Context, in *pb.UpdateUserInfoReq) (*pb.UpdateUserInfoResp, error) {
	l := logic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}

func (s *UserServer) GetUserMoney(ctx context.Context, in *pb.GetUserMoneyReq) (*pb.GetUserMoneyResp, error) {
	l := logic.NewGetUserMoneyLogic(ctx, s.svcCtx)
	return l.GetUserMoney(in)
}

// userAddress
func (s *UserServer) GetUserAddressList(ctx context.Context, in *pb.GetUserAddressListReq) (*pb.GetUserAddressListResp, error) {
	l := logic.NewGetUserAddressListLogic(ctx, s.svcCtx)
	return l.GetUserAddressList(in)
}

func (s *UserServer) CreateUserAddress(ctx context.Context, in *pb.CreateUserAddressReq) (*pb.CreateUserAddressResp, error) {
	l := logic.NewCreateUserAddressLogic(ctx, s.svcCtx)
	return l.CreateUserAddress(in)
}

func (s *UserServer) UpdateUserAddress(ctx context.Context, in *pb.UpdateUserAddressReq) (*pb.UpdateUserAddressResp, error) {
	l := logic.NewUpdateUserAddressLogic(ctx, s.svcCtx)
	return l.UpdateUserAddress(in)
}

func (s *UserServer) DeleteUserAddress(ctx context.Context, in *pb.DeleteUserAddressReq) (*pb.DeleteUserAddressResp, error) {
	l := logic.NewDeleteUserAddressLogic(ctx, s.svcCtx)
	return l.DeleteUserAddress(in)
}

func (s *UserServer) GetUserAddressDetail(ctx context.Context, in *pb.GetUserAddressDetailReq) (*pb.GetUserAddressDetailResp, error) {
	l := logic.NewGetUserAddressDetailLogic(ctx, s.svcCtx)
	return l.GetUserAddressDetail(in)
}

// other
func (s *UserServer) CheckUserExists(ctx context.Context, in *pb.CheckUserExistsReq) (*pb.CheckUserExistsResp, error) {
	l := logic.NewCheckUserExistsLogic(ctx, s.svcCtx)
	return l.CheckUserExists(in)
}

func (s *UserServer) CheckUserAndAddressExists(ctx context.Context, in *pb.CheckUserAndAddressExistsReq) (*pb.CheckUserAndAddressExistsResp, error) {
	l := logic.NewCheckUserAndAddressExistsLogic(ctx, s.svcCtx)
	return l.CheckUserAndAddressExists(in)
}

func (s *UserServer) UpdateUserMoney(ctx context.Context, in *pb.UpdateUserMoneyReq) (*pb.UpdateUserMoneyResp, error) {
	l := logic.NewUpdateUserMoneyLogic(ctx, s.svcCtx)
	return l.UpdateUserMoney(in)
}
