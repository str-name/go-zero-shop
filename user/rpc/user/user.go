// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"zero-shop/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Address                       = pb.Address
	CheckUserAndAddressExistsReq  = pb.CheckUserAndAddressExistsReq
	CheckUserAndAddressExistsResp = pb.CheckUserAndAddressExistsResp
	CheckUserExistsReq            = pb.CheckUserExistsReq
	CheckUserExistsResp           = pb.CheckUserExistsResp
	CreateUserAddressReq          = pb.CreateUserAddressReq
	CreateUserAddressResp         = pb.CreateUserAddressResp
	DeleteUserAddressReq          = pb.DeleteUserAddressReq
	DeleteUserAddressResp         = pb.DeleteUserAddressResp
	GenerateTokenReq              = pb.GenerateTokenReq
	GenerateTokenResp             = pb.GenerateTokenResp
	GetUserAddressDetailReq       = pb.GetUserAddressDetailReq
	GetUserAddressDetailResp      = pb.GetUserAddressDetailResp
	GetUserAddressListReq         = pb.GetUserAddressListReq
	GetUserAddressListResp        = pb.GetUserAddressListResp
	GetUserInfoReq                = pb.GetUserInfoReq
	GetUserInfoResp               = pb.GetUserInfoResp
	GetUserMoneyReq               = pb.GetUserMoneyReq
	GetUserMoneyResp              = pb.GetUserMoneyResp
	LoginReq                      = pb.LoginReq
	LoginResp                     = pb.LoginResp
	LogoutReq                     = pb.LogoutReq
	LogoutResp                    = pb.LogoutResp
	RegisterReq                   = pb.RegisterReq
	RegisterResp                  = pb.RegisterResp
	UpdateEmailReq                = pb.UpdateEmailReq
	UpdateEmailResp               = pb.UpdateEmailResp
	UpdatePasswordReq             = pb.UpdatePasswordReq
	UpdatePasswordResp            = pb.UpdatePasswordResp
	UpdateUserAddressReq          = pb.UpdateUserAddressReq
	UpdateUserAddressResp         = pb.UpdateUserAddressResp
	UpdateUserInfoReq             = pb.UpdateUserInfoReq
	UpdateUserInfoResp            = pb.UpdateUserInfoResp
	UpdateUserMoneyReq            = pb.UpdateUserMoneyReq
	UpdateUserMoneyResp           = pb.UpdateUserMoneyResp

	User interface {
		// user
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		UpdateEmail(ctx context.Context, in *UpdateEmailReq, opts ...grpc.CallOption) (*UpdateEmailResp, error)
		UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordResp, error)
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
		GetUserMoney(ctx context.Context, in *GetUserMoneyReq, opts ...grpc.CallOption) (*GetUserMoneyResp, error)
		// userAddress
		GetUserAddressList(ctx context.Context, in *GetUserAddressListReq, opts ...grpc.CallOption) (*GetUserAddressListResp, error)
		CreateUserAddress(ctx context.Context, in *CreateUserAddressReq, opts ...grpc.CallOption) (*CreateUserAddressResp, error)
		UpdateUserAddress(ctx context.Context, in *UpdateUserAddressReq, opts ...grpc.CallOption) (*UpdateUserAddressResp, error)
		DeleteUserAddress(ctx context.Context, in *DeleteUserAddressReq, opts ...grpc.CallOption) (*DeleteUserAddressResp, error)
		GetUserAddressDetail(ctx context.Context, in *GetUserAddressDetailReq, opts ...grpc.CallOption) (*GetUserAddressDetailResp, error)
		// other
		CheckUserExists(ctx context.Context, in *CheckUserExistsReq, opts ...grpc.CallOption) (*CheckUserExistsResp, error)
		CheckUserAndAddressExists(ctx context.Context, in *CheckUserAndAddressExistsReq, opts ...grpc.CallOption) (*CheckUserAndAddressExistsResp, error)
		UpdateUserMoney(ctx context.Context, in *UpdateUserMoneyReq, opts ...grpc.CallOption) (*UpdateUserMoneyResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// user
func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultUser) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultUser) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUser) UpdateEmail(ctx context.Context, in *UpdateEmailReq, opts ...grpc.CallOption) (*UpdateEmailResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateEmail(ctx, in, opts...)
}

func (m *defaultUser) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdatePassword(ctx, in, opts...)
}

func (m *defaultUser) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

func (m *defaultUser) GetUserMoney(ctx context.Context, in *GetUserMoneyReq, opts ...grpc.CallOption) (*GetUserMoneyResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserMoney(ctx, in, opts...)
}

// userAddress
func (m *defaultUser) GetUserAddressList(ctx context.Context, in *GetUserAddressListReq, opts ...grpc.CallOption) (*GetUserAddressListResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserAddressList(ctx, in, opts...)
}

func (m *defaultUser) CreateUserAddress(ctx context.Context, in *CreateUserAddressReq, opts ...grpc.CallOption) (*CreateUserAddressResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.CreateUserAddress(ctx, in, opts...)
}

func (m *defaultUser) UpdateUserAddress(ctx context.Context, in *UpdateUserAddressReq, opts ...grpc.CallOption) (*UpdateUserAddressResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserAddress(ctx, in, opts...)
}

func (m *defaultUser) DeleteUserAddress(ctx context.Context, in *DeleteUserAddressReq, opts ...grpc.CallOption) (*DeleteUserAddressResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DeleteUserAddress(ctx, in, opts...)
}

func (m *defaultUser) GetUserAddressDetail(ctx context.Context, in *GetUserAddressDetailReq, opts ...grpc.CallOption) (*GetUserAddressDetailResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserAddressDetail(ctx, in, opts...)
}

// other
func (m *defaultUser) CheckUserExists(ctx context.Context, in *CheckUserExistsReq, opts ...grpc.CallOption) (*CheckUserExistsResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.CheckUserExists(ctx, in, opts...)
}

func (m *defaultUser) CheckUserAndAddressExists(ctx context.Context, in *CheckUserAndAddressExistsReq, opts ...grpc.CallOption) (*CheckUserAndAddressExistsResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.CheckUserAndAddressExists(ctx, in, opts...)
}

func (m *defaultUser) UpdateUserMoney(ctx context.Context, in *UpdateUserMoneyReq, opts ...grpc.CallOption) (*UpdateUserMoneyResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserMoney(ctx, in, opts...)
}
