// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: cart.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cart_AddProductToCart_FullMethodName      = "/pb.cart/addProductToCart"
	Cart_CartProductList_FullMethodName       = "/pb.cart/cartProductList"
	Cart_DeleteProductFromCart_FullMethodName = "/pb.cart/deleteProductFromCart"
	Cart_UpdateProductDetail_FullMethodName   = "/pb.cart/updateProductDetail"
)

// CartClient is the client API for Cart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClient interface {
	AddProductToCart(ctx context.Context, in *AddProductToCartReq, opts ...grpc.CallOption) (*AddProductToCartResp, error)
	CartProductList(ctx context.Context, in *CartProductListReq, opts ...grpc.CallOption) (*CartProductListResp, error)
	DeleteProductFromCart(ctx context.Context, in *DeleteProductFromCartReq, opts ...grpc.CallOption) (*DeleteProductFromCartResp, error)
	UpdateProductDetail(ctx context.Context, in *UpdateProductDetailReq, opts ...grpc.CallOption) (*UpdateProductDetailResp, error)
}

type cartClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClient(cc grpc.ClientConnInterface) CartClient {
	return &cartClient{cc}
}

func (c *cartClient) AddProductToCart(ctx context.Context, in *AddProductToCartReq, opts ...grpc.CallOption) (*AddProductToCartResp, error) {
	out := new(AddProductToCartResp)
	err := c.cc.Invoke(ctx, Cart_AddProductToCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) CartProductList(ctx context.Context, in *CartProductListReq, opts ...grpc.CallOption) (*CartProductListResp, error) {
	out := new(CartProductListResp)
	err := c.cc.Invoke(ctx, Cart_CartProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) DeleteProductFromCart(ctx context.Context, in *DeleteProductFromCartReq, opts ...grpc.CallOption) (*DeleteProductFromCartResp, error) {
	out := new(DeleteProductFromCartResp)
	err := c.cc.Invoke(ctx, Cart_DeleteProductFromCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) UpdateProductDetail(ctx context.Context, in *UpdateProductDetailReq, opts ...grpc.CallOption) (*UpdateProductDetailResp, error) {
	out := new(UpdateProductDetailResp)
	err := c.cc.Invoke(ctx, Cart_UpdateProductDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServer is the server API for Cart service.
// All implementations must embed UnimplementedCartServer
// for forward compatibility
type CartServer interface {
	AddProductToCart(context.Context, *AddProductToCartReq) (*AddProductToCartResp, error)
	CartProductList(context.Context, *CartProductListReq) (*CartProductListResp, error)
	DeleteProductFromCart(context.Context, *DeleteProductFromCartReq) (*DeleteProductFromCartResp, error)
	UpdateProductDetail(context.Context, *UpdateProductDetailReq) (*UpdateProductDetailResp, error)
	mustEmbedUnimplementedCartServer()
}

// UnimplementedCartServer must be embedded to have forward compatible implementations.
type UnimplementedCartServer struct {
}

func (UnimplementedCartServer) AddProductToCart(context.Context, *AddProductToCartReq) (*AddProductToCartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToCart not implemented")
}
func (UnimplementedCartServer) CartProductList(context.Context, *CartProductListReq) (*CartProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartProductList not implemented")
}
func (UnimplementedCartServer) DeleteProductFromCart(context.Context, *DeleteProductFromCartReq) (*DeleteProductFromCartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductFromCart not implemented")
}
func (UnimplementedCartServer) UpdateProductDetail(context.Context, *UpdateProductDetailReq) (*UpdateProductDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductDetail not implemented")
}
func (UnimplementedCartServer) mustEmbedUnimplementedCartServer() {}

// UnsafeCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServer will
// result in compilation errors.
type UnsafeCartServer interface {
	mustEmbedUnimplementedCartServer()
}

func RegisterCartServer(s grpc.ServiceRegistrar, srv CartServer) {
	s.RegisterService(&Cart_ServiceDesc, srv)
}

func _Cart_AddProductToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductToCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).AddProductToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_AddProductToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).AddProductToCart(ctx, req.(*AddProductToCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_CartProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).CartProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_CartProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).CartProductList(ctx, req.(*CartProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_DeleteProductFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductFromCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).DeleteProductFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_DeleteProductFromCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).DeleteProductFromCart(ctx, req.(*DeleteProductFromCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_UpdateProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).UpdateProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_UpdateProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).UpdateProductDetail(ctx, req.(*UpdateProductDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cart_ServiceDesc is the grpc.ServiceDesc for Cart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.cart",
	HandlerType: (*CartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addProductToCart",
			Handler:    _Cart_AddProductToCart_Handler,
		},
		{
			MethodName: "cartProductList",
			Handler:    _Cart_CartProductList_Handler,
		},
		{
			MethodName: "deleteProductFromCart",
			Handler:    _Cart_DeleteProductFromCart_Handler,
		},
		{
			MethodName: "updateProductDetail",
			Handler:    _Cart_UpdateProductDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}
