// Code generated by goctl. DO NOT EDIT.
// Source: product.proto

package server

import (
	"context"

	"zero-shop/product/rpc/internal/logic"
	"zero-shop/product/rpc/internal/svc"
	"zero-shop/product/rpc/pb"
)

type ProductServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedProductServer
}

func NewProductServer(svcCtx *svc.ServiceContext) *ProductServer {
	return &ProductServer{
		svcCtx: svcCtx,
	}
}

// commonProduct
func (s *ProductServer) Carousel(ctx context.Context, in *pb.CarouselReq) (*pb.CarouselResp, error) {
	l := logic.NewCarouselLogic(ctx, s.svcCtx)
	return l.Carousel(in)
}

func (s *ProductServer) CategoryList(ctx context.Context, in *pb.CategoryListReq) (*pb.CategoryListResp, error) {
	l := logic.NewCategoryListLogic(ctx, s.svcCtx)
	return l.CategoryList(in)
}

func (s *ProductServer) Recommend(ctx context.Context, in *pb.RecommendReq) (*pb.RecommendResp, error) {
	l := logic.NewRecommendLogic(ctx, s.svcCtx)
	return l.Recommend(in)
}

func (s *ProductServer) SearchProduct(ctx context.Context, in *pb.SearchProductReq) (*pb.SearchProductResp, error) {
	l := logic.NewSearchProductLogic(ctx, s.svcCtx)
	return l.SearchProduct(in)
}

func (s *ProductServer) CategoryProductList(ctx context.Context, in *pb.CategoryProductListReq) (*pb.CategoryProductListResp, error) {
	l := logic.NewCategoryProductListLogic(ctx, s.svcCtx)
	return l.CategoryProductList(in)
}

func (s *ProductServer) ProductDetail(ctx context.Context, in *pb.ProductDetailReq) (*pb.ProductDetailResp, error) {
	l := logic.NewProductDetailLogic(ctx, s.svcCtx)
	return l.ProductDetail(in)
}

func (s *ProductServer) ProductCommentList(ctx context.Context, in *pb.ProductCommentListReq) (*pb.ProductCommentListResp, error) {
	l := logic.NewProductCommentListLogic(ctx, s.svcCtx)
	return l.ProductCommentList(in)
}

// storeProduct
func (s *ProductServer) CreateProduct(ctx context.Context, in *pb.CreateProductReq) (*pb.CreateProductResp, error) {
	l := logic.NewCreateProductLogic(ctx, s.svcCtx)
	return l.CreateProduct(in)
}

func (s *ProductServer) ShelfProduct(ctx context.Context, in *pb.ShelfProductReq) (*pb.ShelfProductResp, error) {
	l := logic.NewShelfProductLogic(ctx, s.svcCtx)
	return l.ShelfProduct(in)
}

func (s *ProductServer) UpdateProduct(ctx context.Context, in *pb.UpdateProductReq) (*pb.UpdateProductResp, error) {
	l := logic.NewUpdateProductLogic(ctx, s.svcCtx)
	return l.UpdateProduct(in)
}

func (s *ProductServer) SoldoutProduct(ctx context.Context, in *pb.SoldoutProductReq) (*pb.SoldoutProductResp, error) {
	l := logic.NewSoldoutProductLogic(ctx, s.svcCtx)
	return l.SoldoutProduct(in)
}

func (s *ProductServer) DeleteProduct(ctx context.Context, in *pb.DeleteProductReq) (*pb.DeleteProductResp, error) {
	l := logic.NewDeleteProductLogic(ctx, s.svcCtx)
	return l.DeleteProduct(in)
}

func (s *ProductServer) CreateSeckill(ctx context.Context, in *pb.CreateSeckillReq) (*pb.CreateSeckillResp, error) {
	l := logic.NewCreateSeckillLogic(ctx, s.svcCtx)
	return l.CreateSeckill(in)
}

func (s *ProductServer) DeleteSeckill(ctx context.Context, in *pb.DeleteSeckillReq) (*pb.DeleteSeckillResp, error) {
	l := logic.NewDeleteSeckillLogic(ctx, s.svcCtx)
	return l.DeleteSeckill(in)
}

// userProduct
func (s *ProductServer) CreateCollectProduct(ctx context.Context, in *pb.CreateCollectProductReq) (*pb.CreateCollectProductResp, error) {
	l := logic.NewCreateCollectProductLogic(ctx, s.svcCtx)
	return l.CreateCollectProduct(in)
}

func (s *ProductServer) CollectProductList(ctx context.Context, in *pb.CollectProductListReq) (*pb.CollectProductListResp, error) {
	l := logic.NewCollectProductListLogic(ctx, s.svcCtx)
	return l.CollectProductList(in)
}

func (s *ProductServer) DeleteCollectProduct(ctx context.Context, in *pb.DeleteCollectProductReq) (*pb.DeleteCollectProductResp, error) {
	l := logic.NewDeleteCollectProductLogic(ctx, s.svcCtx)
	return l.DeleteCollectProduct(in)
}

// seckillProduct
func (s *ProductServer) SeckillList(ctx context.Context, in *pb.SeckillListReq) (*pb.SeckillListResp, error) {
	l := logic.NewSeckillListLogic(ctx, s.svcCtx)
	return l.SeckillList(in)
}

func (s *ProductServer) SeckillDetail(ctx context.Context, in *pb.SeckillDetailReq) (*pb.SeckillDetailResp, error) {
	l := logic.NewSeckillDetailLogic(ctx, s.svcCtx)
	return l.SeckillDetail(in)
}

// others
func (s *ProductServer) CheckProductExists(ctx context.Context, in *pb.CheckProductExistsReq) (*pb.CheckProductExistsResp, error) {
	l := logic.NewCheckProductExistsLogic(ctx, s.svcCtx)
	return l.CheckProductExists(in)
}

func (s *ProductServer) CheckSeckillExists(ctx context.Context, in *pb.CheckSeckillExistsReq) (*pb.CheckSeckillExistsResp, error) {
	l := logic.NewCheckSeckillExistsLogic(ctx, s.svcCtx)
	return l.CheckSeckillExists(in)
}

func (s *ProductServer) GetProductListByID(ctx context.Context, in *pb.GetProductListByIDReq) (*pb.GetProductListByIDResp, error) {
	l := logic.NewGetProductListByIDLogic(ctx, s.svcCtx)
	return l.GetProductListByID(in)
}
